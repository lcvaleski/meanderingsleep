# Codemagic CI/CD Configuration for MeanderingSleep React Native App
# This YAML file configures the build, test, and deployment processes for both Android and iOS platforms

workflows:
  # Android Build & Deployment Workflow
  android-workflow:
    name: Android Workflow
    max_build_duration: 120  # Maximum build duration in minutes before timeout
    instance_type: mac_mini_m2  # Type of build machine to use (Apple Silicon M2)
    
    environment:
      # Android signing configuration for release builds
      android_signing:
        - meandering-keystore  # References the keystore configured in Codemagic
      
      # Reference to a group of environment variables configured in Codemagic
      groups:
        - google_credentials  # Contains Google Play API access credentials
      
      # Custom environment variables for this workflow
      vars:
        PACKAGE_NAME: "net.coventry.sleepless"  # Android application ID
        APP_VERSION: "0.2.2"  # Application version number (semver)
    
    scripts:
      # Step 1: Install all JavaScript dependencies from package.json
      - name: Install npm dependencies
        script: | 
          npm install
      
      # Step 2: Run tests
      - name: Run tests
        script: |
          npm run lint
          npm run test
      
      # Step 3: Configure Android SDK location in local.properties
      - name: Set Android SDK location
        script: | 
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      
      # Step 4: Decode and write google-services.json
      - name: Set up Firebase configuration
        script: |
          # Decode the base64-encoded google-services.json and write it to the correct location
          echo $ANDROID_FIREBASE_CONFIG | base64 --decode > "$CM_BUILD_DIR/android/app/google-services.json"
      
      # Step 5: Build the Android release bundle with auto-incremented version number
      - name: Build Android release
        script: | 
          # Fetch the latest build number from Google Play
          LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME")
          
          # Handle the case when no build exists on Google Play yet
          if [ -z $LATEST_GOOGLE_PLAY_BUILD_NUMBER ]; then
            # Use Codemagic's built-in build counter as fallback
            # BUILD_NUMBER is automatically incremented with each build in this workflow
            UPDATED_BUILD_NUMBER=$BUILD_NUMBER
          else
            # Increment the build number from Google Play by 5 for a safety margin
            # This handles potential issues with stale or cached data
            UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 5))
            echo "Latest build number from Google Play: $LATEST_GOOGLE_PLAY_BUILD_NUMBER, setting to: $UPDATED_BUILD_NUMBER"
          fi
          
          # Navigate to Android directory and execute Gradle build
          cd android
          ./gradlew bundleRelease \
              -PversionCode=$UPDATED_BUILD_NUMBER \
              -PversionName=$APP_VERSION
    
    # Files to save after build completion
    artifacts:
      - android/app/build/outputs/**/*.aab  # Android App Bundle for release
    # Publishing configuration for Google Play Store
    publishing:
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS  # From google_credentials group
        track: internal  # Deploy to internal testing track
        submit_as_draft: true  # Upload as draft (requires manual review)
        changes_not_sent_for_review: true  # Don't auto-submit for review

  # iOS Build & Deployment Workflow
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120  # Maximum build duration in minutes before timeout
    instance_type: mac_mini_m2  # Type of build machine to use (Apple Silicon M2)
    
    # External service integrations
    integrations:
      app_store_connect: codemagic  # Uses App Store Connect API key named 'codemagic'
    
    environment:

      groups:
        - google_credentials  # Contains Google Play API access credentials

      # iOS code signing configuration for App Store distribution
      ios_signing:
        distribution_type: app_store  # Type of distribution
        bundle_identifier: net.coventry.sleepless  # iOS bundle identifier
      
      # Custom environment variables for this workflow
      vars:
        XCODE_WORKSPACE: "meanderingsleep.xcworkspace"  # Xcode workspace file name
        XCODE_SCHEME: "meanderingsleep"  # Xcode build scheme name
        APP_STORE_APPLE_ID: 6502964632  # App's unique identifier in App Store Connect
        APP_VERSION: "0.2.2"  # Application version number (semver)
    
    scripts:
      # Step 1: Install all dependencies (JS and native iOS through CocoaPods)
      - name: Install JS & native dependencies
        script: |
          npm install
          cd ios && pod install && cd ..
      
      # Step 2: Run tests
      - name: Run tests
        script: |
          npm run lint
          npm run test
      
      # Step 3: Configure code signing based on profiles from Codemagic
      - name: Set up code signing
        script: |
          xcode-project use-profiles
      
      # Step 4: Set up Firebase configuration for iOS
      - name: Set up Firebase configuration
        script: |
          # Decode the base64-encoded GoogleService-Info.plist and write it to the correct location
          echo $IOS_FIREBASE_CONFIG | base64 --decode > "$CM_BUILD_DIR/ios/GoogleService-Info.plist"
      
      # Step 5: Set version and increment build number based on TestFlight
      - name: Set version and build number
        script: | 
          #!/bin/sh
          cd $CM_BUILD_DIR/ios
          # Set marketing version (CFBundleShortVersionString)
          xcrun agvtool new-marketing-version $APP_VERSION
          
          # Set build number (CFBundleVersion)
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-app-store-build-number "$APP_STORE_APPLE_ID")
          # Add a safety margin to ensure we're above any existing build number
          # Also handles case where the API returns stale data
          NEW_BUILD_NUMBER=$(($LATEST_BUILD_NUMBER + 5))
          echo "Latest build number from App Store: $LATEST_BUILD_NUMBER, setting to: $NEW_BUILD_NUMBER"
          agvtool new-version -all $NEW_BUILD_NUMBER
      
      # Step 6: Build the iOS app and create an IPA package
      - name: Build .ipa for release
        script: |
          xcode-project build-ipa \
            --workspace "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"
    
    # Files to save after build completion
    artifacts:
      - build/ios/ipa/*.ipa  # iOS application package
      - /tmp/xcodebuild_logs/*.log  # Build logs for debugging
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app  # Built app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM  # Debug symbols
    # Publishing configuration for App Store Connect
    publishing:
      app_store_connect:
        auth: integration  # Use the App Store Connect integration defined above
        submit_to_testflight: true  # Upload to TestFlight for beta testing
        submit_to_app_store: false  # Don't submit to App Store for review